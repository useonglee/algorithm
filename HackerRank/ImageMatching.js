// HackerRank - Image Matching

function countMatches(grid1, grid2) {
  // 두 그리드를 비교해서 연결된 부분이 같지 않은 것을 반환한다.
  
  // 수도 코드
  // 1. 두 그리드를 2차원 배열로 만든다.
  // 2. dfs 알고리즘으로 범위를 카운트로 계산하고 배열에 저장한다.
  // 3. 각 그리드마다 인접한 범위들을 비교하고, 같은 범위이면서 region들의 좌표가 같은 개수를 반환한다.
  
  grid1 = grid1.map(v => v.split(''));
  grid2 = grid2.map(v => v.split(''));
  
  let n = grid1.length;
  let m = grid1[0].length;
  
  const dfs = (grid, x, y) => {
      if (x <= -1 || x >= n || y <= -1 || y >= m) {
          return false;
      }
      
      if (grid[x][y] === '1') {
          grid[x][y] = '0';
          
          // 좌표를 저장한다.
          temp += `${x}${y}`;
          region++;
          
          dfs(grid, x - 1, y);
          dfs(grid, x, y - 1);
          dfs(grid, x + 1, y);
          dfs(grid, x, y + 1);
          
          return true;
      }
      
      return false;
  }

  let oneRegions = {};
  let region = 0;
  let temp = '';

  for (let i = 0; i < n; i++) {
      for (let j = 0; j < m; j++) {
          if (dfs(grid1, i, j) === true) {
              if (oneRegions[region] === undefined) {
                  oneRegions[region] = [];
              }
            
              oneRegions[region].push(temp);
              region = 0;
              temp = [];
          }
      }
  }

  let twoRegions = {};

  for (let i = 0; i < n; i++) {
      for (let j = 0; j < m; j++) {
          if (dfs(grid2, i, j) === true) {
              if (twoRegions[region] === undefined) {
                  twoRegions[region] = [];
              }
            
              twoRegions[region].push(temp);
              region = 0;
              temp = [];
          }
      }
  }
  
  let answer = 0;

  for(let one in oneRegions) {
    const oneSet = new Set(oneRegions[one]);
    
    for (let two in twoRegions) {
      if (one === two) {
        for (let i = 0; i < twoRegions[two].length; i++) {
          if (oneSet.has(twoRegions[two][i])) answer++
        }
      }
    }
  }

  return answer;
}

console.log(countMatches(
  [
    '100100100100110',
    '000100110100101',
    '001000101101110',
    '001000110010100',
    '100000000010011',
    '011100000110111',
    '011110001101010',
    '011100000101001',
    '000101011000100',
    '110010011011000',
    '000100000111100',
    '100100001101011',
    '100000111010100',
    '010110011001100',
    '110000000011100'
  ], 
  [
    '100000100100110',
    '000100110101000',
    '001000101101110',
    '001000100010100',
    '101000000010011',
    '001000000110011',
    '001110000111110',
    '011100000101001',
    '000101011000100',
    '110000011010000',
    '000100000111100',
    '100100001101011',
    '100101111010100',
    '010110010001100',
    '111000010011100'
  ]))
// 12

console.log(countMatches(
  [
    '0100',
    '1001',
    '0011',
    '0011'
  ], 
  [
    '0101',
    '1001',
    '0011',
    '0011'
  ]
)) 
// 2

console.log(countMatches(
  [
    '001',
    '011',
    '100'
  ], 
  [
    '001',
    '011',
    '101']
)) 
// 1

console.log(countMatches(
  [
  '11011111100010011000', '00011000110101100101',
  '01001000001110101110', '10100010001111001111',
  '00000111101010010001', '10110010000000101000',
  '10110001011100000101', '10010000110000000110',
  '00000001101000000101', '11000101101100100011',
  '00001101110010101001', '00111100000101111001',
  '00000010001000011001', '00100010011110101011',
  '10010100100100000000', '01001010111110101010',
  '00100100000100010000', '00000011011000101101',
  '00101000100000000100', '10000100000110101100'],
  
  [
  '11011101100010010010', '00011010110101100101',
  '01001010001110101110', '10100110001111001111',
  '00000111100010110001', '10110010000100101000',
  '10110001011100010101', '10010000110000000110',
  '00000001101000000101', '11000111110100100011',
  '00001101110110101000', '01111100000101111001',
  '00000010001000011101', '00100010011110101011',
  '10010100100100000000', '01001010111100101010',
  '01100100000100011000', '00000011011000001101',
  '00110000101000000100', '10000101010110101100'], 
));
// 33